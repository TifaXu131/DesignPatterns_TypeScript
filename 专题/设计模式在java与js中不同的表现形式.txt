·设计模式的核心是设计意图，而不是形式

·设计模式在ava和js中会有不同的表现形式，这种不同来自于两种语言不同的语言特性

·java和js两种语言不同的语言特性：
①java是静态语言，即变量类型在编译时已经确定。而js是鸭子类型，变量的类型不用考虑，赋什么值就是什么类型。
②java中函数必须依附于对象而存在。而js中，函数是一等公民。

·鸭子类型思想:
  一只鸡走起路来像鸭子，叫起来像鸭子，那么它就是鸭子。 
  这就是动态语言的思想，即不在乎变量的类型，只在乎它能做什么，所以js不会有编译时类型检查的过程。

·多态与面向接口编程：
  多态：指允许不同类的对象对同一消息做出响应，即同一消息可以根据发送对象的不同而采用多种不同的行为方式。核心是把“做什么”和“谁去做”分离开来。
  面向接口编程是程序多态的实现方式。

·鸭子类型与面向接口编程：
  java中要实现面向接口编程并不容易，它往往需要通过抽象类或接口将对象进行向上转型。当对象的真正类型被隐藏在超类的背后，这些对象才能在类型系统“监视”下相互被替换使用，才能体现出对象多态的价值。
  而js利用鸭子类型的思想，无需借助超类，就能轻松实现面向接口编程。

·鸭子类型比强类型更好？
  鸭子类型说白了就是无类型约束，天生拥有多态能力，但无约束将失去类型检查的好处：失去易读性、编译时错误检测、更友好的IDE提示、更方便利用IDE进行代码重构。

·鸭子类型与设计模式：
  -- 工厂方法模式：在静态语言中，解开对象类型之间的耦合关系非常重要，这样才有机会让对象表现出多态性，所以会将创建何种对象延迟到子类中来。但是js是无类型的，所以没有必要让子类来决定创建何种对象。
  -- 组合模式：在java中，实现组合模式的关键是Composite类和leaf类都必须继承自一个Compenent抽象类，这样可以保证组合对象和叶对象拥有同样的名字的方法，从而对同一消息都作出反馈。组合对象和叶对象的具体类型隐藏在Compenent抽象类后。而js中，对象多态性与生俱来，但js中难点是在于如何保证组合对象和叶对象拥有同样的方法，这是动态语言的缺点。

·函数是一等公民：  
  函数能够脱离对象单独存在（实际上，js中函数也是对象），它可以有属性，可以赋值给一个变量，可以放在数组里作为元素，可以作为其他对象的属性，可以被当作参数传递给其他函数，还可以作为其他函数返回值。

·函数式比面向对象范式更好？
  面向对象范式的好处：将同类或相似的方法归类在一起，语义明确，层次分明，非常优雅。

·一等公民函数与设计模式
  -- 策略模式：面向对象中，策略模式需要定义一系列算法，算法被封装在策略类内部的方法里。而js中，函数也是对象可以直接传入使用。
  -- 命令模式：js作为函数是一等公民的语言，跟策略模式一样，命令模式也早已融入到js语言中。运算块不一定要封装在command.execute方法中，也可以封装在普通函数中。函数本身就可以被四处传递。及时我们依然需要请求“接收者”，那也未必使用面向对象的方式，闭包可以完成同样的功能。

·面向对象与函数式的抉择：
  ts具备类型检查系统，是一门与java相似的面向对象语言；同时也是js的超集，具备js鸭子类型特性和函数式语言的特性
  我们知道，语言会从鸭子类型特性和函数式语言的特性2方面影响到设计模式的实现：
  ①鸭子类型天然具备多态性，使代码简化，但是将失去类型检测，我认为这是划不来的，所以ts的设计模式必须有类型检测。
  ②另外，函数式范式将简化代码，易于理解，尽快将失去结构的整体性，但还是推荐ts将函数作为对象的特性应用到设计模式中。












